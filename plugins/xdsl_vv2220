#!/usr/bin/env php
<?php
########################################################################
#                                                                      #
# Munin plugin for A1 branded ADB VV2220 modems.                       #
# Tested at SU (single user) mode with ADSL/ADSL2+.                    #
#                                                                      #
# Inspired by: https://irregular-logic.blogspot.co.at/2017/06/         #
#                                                                      #
# Author:  Christian SchrÃ¶tter <cs@fnx.li>                             #
# License: GNU General Public License, version 3                       #
#                                                                      #
########################################################################
#                                                                      #
# 1) Enable plugin: ln -s /usr/share/munin/plugins/fnx/xdsl_vv2220 \   #
#                         /etc/munin/plugins/xdsl                      #
#                                                                      #
# 2) Create config:    touch      /etc/munin/plugin-conf.d/xdsl \      #
#                   && chmod 0600 /etc/munin/plugin-conf.d/xdsl \      #
#                   && editor     /etc/munin/plugin-conf.d/xdsl        #
#                                                                      #
#    > [xdsl]                                                          #
#    > env.hostname      <VHOST>       (optional; virtual hostname)    #
#    > env.www_address   10.0.0.138    (optional; FQDN or IP address)  #
#    > env.www_username  <USERNAME>                                    #
#    > env.www_password  <PASSWORD>                                    #
#    > env.extended      <true/false>  (optional; memory/load/uptime)  #
#                                                                      #
# 3) Test it: munin-run xdsl                                           #
#                                                                      #
# 4) Reload daemon: service munin-node restart                         #
#                                                                      #
# 5) Enjoy! :-)                                                        #
#                                                                      #
########################################################################

if(version_compare(PHP_VERSION, '5.5.0', '<'))
{
	print("PHP 5.5.0 or newer is required!\n");
	exit(1);
}
else if(php_sapi_name() != 'cli')
{
	print("Please execute this script via CLI!\n");
	exit(1);
}

set_error_handler('a1_error');
error_reporting(-1);

if(!($basename = basename($_SERVER['argv'][0])))
{
	throw new Exception('Could not extract basename');
}
else if(substr($basename, -1) !== '_')
{
	$basename .= '_';
}

if(isset($_SERVER['extended']) && $_SERVER['extended'] && !in_array(strtolower($_SERVER['extended']), ['no', 'off', 'false']))
{
	$extended = true;
}
else
{
	$extended = false;
}

if($_SERVER['argc'] > 1)
{
	if($_SERVER['argv'][1] === 'autoconf')
	{
		print("no\n");
		exit(0);
	}
	else if($_SERVER['argv'][1] === 'config')
	{
		if(isset($_SERVER['hostname']))
		{
			printf("host_name %s\n", str_replace(["\r", "\n"], '', $_SERVER['hostname']));
		}

		print("multigraph ${basename}stats\n");
		{
			print("graph_title xDSL line stats\n");
			print("graph_vlabel down (-) / up (+)\n");
			print("graph_category network\n");
			print("graph_scale no\n");

			print("status.label Status\n");
			print("status.info only zero = OK\n");
			print("status.colour COLOUR16\n");

			print("max_down.graph no\n");
			print("max_down.label ...\n");
			print("max_down.cdef max_down,131072,/\n");
			print("max_down.min 0\n");

			print("max_up.label Max. (Mbit)\n");
			print("max_up.info maximum line rate\n");
			print("max_up.colour COLOUR20\n");
			print("max_up.draw AREA\n");
			print("max_up.cdef max_up,131072,/\n");
			print("max_up.negative max_down\n");
			print("max_up.min 0\n");

			print("bw_down.graph no\n");
			print("bw_down.label ...\n");
			print("bw_down.cdef bw_down,131072,/\n");
			print("bw_down.min 0\n");

			print("bw_up.label Rate (Mbit)\n");
			print("bw_up.info current line rate\n");
			print("bw_up.colour COLOUR19\n");
			print("bw_up.draw AREA\n");
			print("bw_up.cdef bw_up,131072,/\n");
			print("bw_up.negative bw_down\n");
			print("bw_up.min 0\n");

			print("pwr_down.graph no\n");
			print("pwr_down.label ...\n");
			print("pwr_down.min 0\n");

			print("pwr_up.label PWR  (dBm)\n");
			print("pwr_up.info output power\n");
			print("pwr_up.colour COLOUR15\n");
			print("pwr_up.draw LINE2\n");
			print("pwr_up.negative pwr_down\n");
			print("pwr_up.min 0\n");

			print("attn_down.graph no\n");
			print("attn_down.label ...\n");
			print("attn_down.min 0\n");

			print("attn_up.label ATTN (dB)\n");
			print("attn_up.info line attenuation\n");
			print("attn_up.colour COLOUR0\n");
			print("attn_up.draw LINE2\n");
			print("attn_up.negative attn_down\n");
			print("attn_up.min 0\n");

			print("snr_down.graph no\n");
			print("snr_down.label ...\n");
			print("snr_down.min 0\n");

			print("snr_up.label SNR  (dB)\n");
			print("snr_up.info signal-to-noise ratio\n");
			print("snr_up.colour COLOUR1\n");
			print("snr_up.draw LINE2\n");
			print("snr_up.negative snr_down\n");
			print("snr_up.min 0\n");
		}

		if($extended)
		{
			print("multigraph ${basename}uptime\n");
			{
				print("graph_title xDSL modem uptime\n");
				print("graph_args --base 1000 -l 0\n");
				print("graph_scale no\n");
				print("graph_vlabel days\n");
				print("graph_category system\n");
				print("uptime.label uptime\n");
				print("uptime.draw AREA\n");
			}

			print("multigraph ${basename}memory\n");
			{
				print("graph_title xDSL modem memory\n");
				print("graph_args --base 1024 -l 0\n");
				print("graph_vlabel byte\n");
				print("graph_category system\n");
				print("graph_order umem uswap fmem fswap\n");

				print("umem.label RAM used\n");
				print("umem.draw AREASTACK\n");
				print("umem.colour COLOUR3\n");

				print("uswap.label SWP used\n");
				print("uswap.draw AREASTACK\n");
				print("uswap.colour COLOUR2\n");

				print("fmem.label RAM free\n");
				print("fmem.draw AREASTACK\n");
				print("fmem.colour COLOUR20\n");

				print("fswap.label SWP free\n");
				print("fswap.draw AREASTACK\n");
				print("fswap.colour COLOUR19\n");
			}

			print("multigraph ${basename}load\n");
			{
				print("graph_title xDSL modem load\n");
				print("graph_args --base 1000 -l 0\n");
				print("graph_vlabel load\n");
				print("graph_category system\n");
				print("graph_scale no\n");

				print("load.label load (5m)\n");
				print("load.info 5 minute load average\n");
				print("load15.label load (15m)\n");
				print("load15.info 15 minute load average\n");
			}
		}

		exit(0);
	}
}

define('A1_HOST', (isset($_SERVER['www_address']) ? $_SERVER['www_address'] : '10.0.0.138'));
define('A1_USER', (isset($_SERVER['www_username']) ? $_SERVER['www_username'] : null));
define('A1_PASS', (isset($_SERVER['www_password']) ? $_SERVER['www_password'] : null));
define('A1_LANG', 'EN');

if(!A1_HOST || !A1_USER || !A1_PASS)
{
	throw new Exception('Missing ENV variables');
}

$result = a1_stats();
$mode = (isset($result['mode']) ? sprintf(' (%s)', $result['mode'][0]) : '');

$output = ['stats' => []];

if(isset($result['status']) && $result['status'][0] === 'Showtime')
{
	$output['stats']['status'] = [0, $result['status'][0] . $mode];
}
else
{
	$output['stats']['status'] = [1, $result['status'][0] . $mode];
}

if(isset($result['snr'][0][1]))
{
	$output['stats']['snr_down'] = abs($result['snr'][0][0]);
	$output['stats']['snr_up']   = abs($result['snr'][0][1]);
}

if(isset($result['attn'][0][1]))
{
	$output['stats']['attn_down'] = abs($result['attn'][0][0]);
	$output['stats']['attn_up']   = abs($result['attn'][0][1]);
}

if(isset($result['pwr'][0][1]))
{
	$output['stats']['pwr_down'] = abs($result['pwr'][0][0]);
	$output['stats']['pwr_up']   = abs($result['pwr'][0][1]);
}

if(isset($result['max'][0][1]))
{
	$output['stats']['max_down'] = abs($result['max'][0][1] * 1024 / 8);
	$output['stats']['max_up']   = abs($result['max'][0][0] * 1024 / 8);
}

if(isset($result['channel'][0][1]))
{
	$output['stats']['bw_down'] = abs($result['channel'][0][1] * 1024 / 8);
	$output['stats']['bw_up']   = abs($result['channel'][0][0] * 1024 / 8);
}
else if(isset($result['bearer'][0][1]))
{
	$output['stats']['bw_down'] = abs($result['bearer'][0][1] * 1024 / 8);
	$output['stats']['bw_up']   = abs($result['bearer'][0][0] * 1024 / 8);
}

// TODO: 2nd channel?
// ...

if(isset($result['_sys_uptime']))
{
	$output['uptime'] = ['uptime' => $result['_sys_uptime'] / 86400];
}

if(isset($result['_total_memory'], $result['_free_memory'], $result['_total_swap_memory'], $result['_free_swap_memory']))
{
	$output['memory'] =
	[
		'umem' => $result['_total_memory'] - $result['_free_memory'],
		'fmem' => $result['_free_memory'],

		'uswap' => $result['_total_swap_memory'] - $result['_free_swap_memory'],
		'fswap' => $result['_free_swap_memory'],
	];
}

if(isset($result['_sys_load']))
{
	$output['load'] =
	[
		'load'   => $result['_sys_load'][1],
		'load15' => $result['_sys_load'][2],

	];
}

foreach($output as $graph => $_)
{
	printf("multigraph %s%s\n", $basename, $graph);

	foreach($_ as $key => $value)
	{
		if(is_array($value))
		{
			$info = $value[1];
			$value = $value[0];

			printf("%s.extinfo %s\n", $key, str_replace(["\r", "\n"], '', $info));
		}

		printf("%s.value %s\n", $key, str_replace(["\r", "\n"], '', $value));
	}
}
unset($graph, $_, $key, $value, $info);

function a1_stats()
{
	global $curl;

	if(!($curl = curl_init()))
	{
		throw new Exception('Could not initialize cURL');
	}

	$tmpfile = sprintf('%s/%s-%s.txt', sys_get_temp_dir(), md5(__file__), md5(A1_HOST));

	if(!file_exists($tmpfile) && (!touch($tmpfile) || !chmod($tmpfile, 0600)))
	{
		throw new Exception('Could not setup cookie jar');
	}

	foreach([
		CURLOPT_COOKIEJAR => $tmpfile,
		CURLOPT_COOKIEFILE => $tmpfile,
		CURLOPT_RETURNTRANSFER => true,
	] as $key => $value)
	{
		a1_opt($key, $value);
	}
	unset($key, $value);

	// Step 0: Try to reuse old session. (see step 4)
	a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/dboard/diagnostics/dsldiag/stats');
	$result = a1_exec();

	$_ = curl_getinfo($curl);
	if($_['http_code'] !== 200)
	{
		// Step 1: Fetch login nonce and other hidden fields.
		a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/login');
		$result = a1_exec();

		$matches = null;
		if(!($c = preg_match_all('#<input type=(["\']{1})hidden\\1 name=(["\']{1})([^"\']+)\\2 value=(["\']{1})([^"\']+)\\4 />#', $result, $matches)))
		{
			throw new Exception('No hidden fields available');
		}
		else
		{
			$hidden = [];
			for($i = 0; $i < $c; $i++)
			{
				$hidden[$matches[3][$i]] = $matches[5][$i];
			}
			unset($matches, $c, $i);

			if(!isset($hidden['nonce'], $hidden['code1'], $hidden['code3']))
			{
				throw new Exception('Required hidden fields not found');
			}
		}

		// Step 2: Login with default superuser credentials.
		a1_opt(CURLOPT_POSTFIELDS, $hidden + ['login' => 'Login', 'language' => A1_LANG, 'userName' => A1_USER, 'userPwd' => hash_hmac('sha256', A1_PASS, $hidden['nonce'])]);
		a1_redirect('/ui/dboard');
		unset($hidden);

		// Step 3: Switch to advanced mode.
		a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/dboard?level=2');
		a1_opt(CURLOPT_HTTPGET, true);
		a1_redirect('/ui/dboard');

		// Step 4: Fetch DSL stats and extract relevant data.
		a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/dboard/diagnostics/dsldiag/stats');
		$result = a1_exec();
	}
	unset($_);

	if(($apos = strpos($result, '<pre>')) === false)
	{
		throw new Exception();
	}
	else if(($bpos = strpos($result, '</pre>', $apos)) === false)
	{
		throw new Exception();
	}
	else
	{
		$result = substr($result, $apos + 5, $bpos - $apos - 6);
	}

	$matches = null;
	$return = [];
	$result = explode("\n", $result);
	$c = count($result);

	for($i = 0; $i < $c; $i++)
	{
		$line = explode(':', trim($result[$i]), 2);

		if(count($line) > 1)
		{
			$key = str_replace(' ', '_', trim(preg_replace('#\(.*?\)$#', '', strtolower($line[0]))));
			$value = trim($line[1]);

			if($value === 'N/A')
			{
				$value = null;
			}
			else if(is_numeric($value))
			{
				$value = (int) $value;
			}
			else if(preg_match('#^([0-9.-]+)\s+([0-9.-]+)$#', $value, $matches))
			{
				$value = [(float) $matches[1], (float) $matches[2]];
			}
			else if(preg_match('#^([0-9.-]+)/([0-9.-]+)\s+([0-9.-]+)/([0-9.-]+)$#', $value, $matches))
			{
				$value = [[(float) $matches[1], (float) $matches[2]], [(float) $matches[3], (float) $matches[4]]];
			}
			else if(preg_match('# = ([0-9]+) Kbps, .+ = ([0-9]+) Kbps$#', $value, $matches))
			{
				$value = [(int) $matches[1], (int) $matches[2]];
			}

			if(!isset($return[$key]))
			{
				$return[$key] = [];
			}

			$return[$key][] = $value;
			unset($key, $value);
		}
	}
	unset($matches, $i, $c, $result, $line, $key, $value);

	// Step 5: Fetch system infos.
	a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/dboard/diagnostics/sysload');
	$result = a1_exec();

	$last = 0;
	while(($pos = strpos($result, '<div class="formField">', $last)) !== false)
	{
		if(($_ = strpos($result, '</div>', $pos)) === false)
		{
			throw new Exception();
		}

		$last = $_;
		$item = substr($result, $pos, ($_ - $pos));

		if(($ls = strpos($item, '<label>')) !== false)
		{
			if(($le = strpos($item, '</label>', $ls)) !== false)
			{
				if(($ss = strpos($item, '<span class=\'text\'')) !== false)
				{
					if(($se = strpos($item, '</span>', $ss)) !== false)
					{
						$s = trim(html_entity_decode(strip_tags(substr($item, $ss, ($se - $ss)))));
						$l = strtolower(html_entity_decode(strip_tags(substr($item, $ls, ($le - $ls)))));
						$l = trim(str_replace(':', '', preg_replace('#\(.*?\)#', '', $l)));

						switch($l)
						{
							case 'system has been up for':
								$s = explode(' ', $s);
								$c = count($s);
								$_ = 0;

								for($i = 0; $i < $c; $i++)
								{
									$value = abs((int) substr($s[$i], 0, -1));
									$key = substr($s[$i], -1);

									switch($key)
									{
										case 'w':
											$_ += $value * 86400 * 7;
											break;

										case 'd':
											$_ += $value * 86400;
											break;

										case 'h':
											$_ += $value * 3600;
											break;

										case 'm':
											$_ += $value * 60;
											break;

										case 's':
											$_ += $value;
											break;

										default:
											throw new Exception('Invalid uptime format: ' . $key);
									}
								}
								unset($c, $i, $key, $value);

								if($_)
								{
									$return['_sys_uptime'] = $_;
								}
								break;

							case 'total memory':
							case 'free memory':
							case 'total swap memory':
							case 'free swap memory':
								$return['_' . str_replace(' ', '_', $l)] = abs((int) $s) * 1024;
								break;

							case 'average cpu load':
								$s = explode('/', $s);
								if(count($s) == 3)
								{
									$return['_sys_load'] = [(float) $s[0], (float) $s[1], (float) $s[2]];
								}
								break;

						#	case 'cpu usage': // in %
						#	case 'cpu waiting for i/o':
						#		continue;
						#
						#	case 'number of processes':
						#		continue;
						#

							default:
								continue;
						}
					}
				}
			}
		}
	}
	unset($last, $pos, $_, $item);

	/*
	try
	{
		// Last step: Logout!
		a1_opt(CURLOPT_URL, 'http://' . A1_HOST . '/ui/logout');
		a1_redirect('/ui/login');

		curl_close($curl);
		unset($tmpfile);
	}
	catch(Exception $e)
	{
		fwrite(STDERR, $e->getTraceAsString());
	}
	*/

	return $return;
}

function a1_opt($key, $value)
{
	global $curl;

	if(!curl_setopt($curl, $key, $value))
	{
		throw new Exception(curl_error($curl), curl_errno($curl));
	}
}

function a1_exec()
{
	global $curl;

	if(($result = curl_exec($curl)) === false)
	{
		throw new Exception(curl_error($curl), curl_errno($curl));
	}

	return $result;
}

function a1_redirect($url)
{
	global $curl;

	if(($result = a1_exec()) !== '')
	{
		throw new Exception('Response body is not empty');
	}

	$_ = curl_getinfo($curl);

	if($_['http_code'] !== 302 || substr($_['redirect_url'], -strlen($url)) !== $url)
	{
		throw new Exception('Invalid redirect location in response');
	}
}

function a1_error($severity, $message, $file, $line)
{
	if(!(error_reporting() & $severity))
	{
		return;
	}

	throw new ErrorException($message, 0, $severity, $file, $line);
}

?>
